name: PR Test Coverage

on:
  pull_request:
    types: [opened, synchronize]

env:
  JASYPT_KEY: ${{ secrets.JASYPT_KEY }}

permissions:
  pull-requests: write

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Set up GCS Key file
        id: gcs-key-file
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "gcp-img-role.json"
          json: ${{ secrets.GCS_KEY }}
          dir: './src/main/resources/static/'

      - name: Set up Firebase Key file
        id: firebase-key-file
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase-adminsdk.json"
          json: ${{ secrets.FIREBASE_KEY }}
          dir: './src/main/resources/static/'

      - name: Set up Apple Key file
        run: echo "${{ secrets.APPLE_AUTH_KEY }}" > ./src/main/resources/static/AuthKey_ZJ4VQZNW7D.p8
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and run tests with JaCoCo
        run: ./gradlew clean test jacocoTestReport

      - name: Check build success
        id: build-status
        run: |
          if [ $? -eq 0 ]; then
            echo "Build Successful"
            echo "build_status=success" >> $GITHUB_ENV
          else
            echo "Build Failed"
            echo "build_status=failure" >> $GITHUB_ENV
          fi

      - name: Parse JaCoCo coverage results and post as a table
        id: post-coverage-table
        run: |
          COVERAGE_TABLE="| File | Line Coverage | Branch Coverage |\n"
          COVERAGE_TABLE+="| ---- | ------------- | --------------- |\n"
          
          COVERAGE_FILES=$(find build/reports/jacoco/test/xml -type f -name "*.xml")
          
          for FILE in $COVERAGE_FILES; do
            FILENAME=$(basename $FILE .xml)
            LINE_COVERAGE=$(xmllint --xpath "string(//package/class/lineCoverage)" $FILE)
            BRANCH_COVERAGE=$(xmllint --xpath "string(//package/class/branchCoverage)" $FILE)

            COVERAGE_TABLE+="| $FILENAME | $LINE_COVERAGE% | $BRANCH_COVERAGE% |\n"
          done
          
          echo "$COVERAGE_TABLE" >> $GITHUB_ENV
          echo "Coverage table generated."

      - name: Post coverage and build status report on PR
        uses: github-script@v6
        with:
          script: |
            const coverageTable = process.env.COVERAGE_TABLE;
            const buildStatus = process.env.BUILD_STATUS;
            
            const commentBody = `**Build Status**: ${buildStatus}\n\n**Test Coverage Report**:\n\n${coverageTable}`;
            
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
      
      - name: Fail the build if coverage is below the required minimum
        run: |
          if [ $(./gradlew jacocoTestReport --quiet | grep 'Total' | awk '{print $4}' | cut -d% -f1) -lt 40 ]; then
            echo "Coverage is below the minimum threshold" && exit 1;
          fi
